
/*
 * The notes tool extends the Tool class
 */
class NotesTool : Tool
{
	// Mesh of a note
	var mNoteMesh;
	
	// This CVmObject represent the "preview" note that is put on the tip of the controller
	var mPreviewNote;
	
	// List of currently active notes
	var mNotesList;
	
	// Shader to render the notes
	var mNotesShader;
	
	// Texture for the note object; passed to the shader
	var mNoteTexture;
	
	var mColorPicker;
	
	// Public functions
	UpdateLogic(dt);
	UndoLastAction(content);
	RedoLastAction(content);
	
	// Private functions
	ManageNotes();
	ManageColorPicker();
	
	// Public inherited functions
	Draw();
	SetToolActive(active);
	SetActionAvailable(isActionAvailable);
};


function NotesTool::NotesTool(panel, actionController, animator, actionsListManager)
{
	// Calling the method that works as constructor for the parent class
	Tool::this.Init("Textures/icons/notes.png", "Annotations", panel, actionController, animator, actionsListManager);
	
	// Sizes of the note mesh
	var noteHalfWidth = 0.5 * SCALE_FACTOR / 2.0;
	var noteHalfHeight = 0.5 * SCALE_FACTOR / 2.0;
	
	mNoteMesh = CVmNewMesh(VRP_PLANE, 1, [-noteHalfWidth, -noteHalfHeight, 0], [noteHalfWidth, noteHalfHeight, 0], 2, 2);

	mPreviewNote = CVmObj(mNoteMesh);
	
	// Initially the scale of the preview note is 0; it will be animated when it appears
	mPreviewNote.SetScale([0, 0, 0]);
	
	mNotesShader = CVmShaderProgram("Shaders/postItShader.glsl");
	
	mNotesList = {};
	
	mNoteTexture = CVmTexture("Textures/postit.png");
	
	mColorPicker = ColorPicker(mPanel, mActionController);
}


/*
 * This method draws the preview note if the tool is selected and draws any note put in the world
 */
function NotesTool::Draw()
{
	// Calling the base class method
	Tool::this.Draw(); 
	
	// Activating the texture. This is the only way I managed to pass the texture to the shader
	SetActiveTexture(mNoteTexture, VR_NO_FILTER, 5);

	// Activating shader and passing the reference to its texture
	mNotesShader.Start();
		// I pass the texture to the shader via the id I used in the SetActiveTexture() call above
		mNotesShader.SetParameter("tex", 5);
		
		// If there is an action available (this also implies that the tool is selected) I draw the preview note.
		// Since when the action is not available anymore (i.e. the user is pointing the menu) I play a little scaling animation,
		// I want to keep drawing the preview note until the scale reaches 0. So I also draw the preview note if no action
		// is available and the scale is still above 0
		if(misActionAvailable || (!misActionAvailable && mPreviewNote.GetScale().x > 0))
		{
			mNotesShader.SetParameter("alpha", 0.5);
			mPreviewNote.Draw();
		}
		
		mNotesShader.SetParameter("alpha", 1.0);
		
		// I draw each active note in any case
		foreach(var note in mNotesList)
			note.Draw();
			
	mNotesShader.Stop();
	
	if(mIsToolActive || (!mIsToolActive && mColorPicker.GetScale().x > 0))
		mColorPicker.Draw();
}

/*
 * This method updates the logic behind the tool, but only if it's active
 */
function NotesTool::UpdateLogic(dt)
{
	ManageNotes();
	mColorPicker.UpdateLogic(dt);
}

function NotesTool::ManageNotes()
{
	// I only procede if there is an action available; otherwise there is no reason to update the preview note
	// or to check if the user clicked to place a note
	if(misActionAvailable)
	{
		// I update the position and orientation of the preview node so that it "follows" the controller
		mPreviewNote.SetPosition(mActionController.GetControllerTipCoordinates());
		mPreviewNote.SetRotationMatrix(mActionController.GetRotationMatrix());
		
		// If the player presses the trigger on the action controller the note is put in the world
		if(mActionController.PrimaryButtonSinglePressed())
		{
			// Adding the note to the list of persistent notes
			aadd(mNotesList, mPreviewNote);
			
			// Creating a new preview note
			mPreviewNote = CVmObj(mNoteMesh);
			
			// Creating a little animation for the new note
			mAnimator.CreateScalingTransition(mPreviewNote, [0, 0, 0], [1.0, 1.0, 1.0], 0.2, false, 2);	
			
			// Now, this is the part needed for the undo/redo mechanism. I need to save the relevant things of the note
			// so that in case of undo they can be used; in this case it's only the position and orientation of the note,
			// but in the future there will probably be also the color, and maybe other stuff too
			var newActionContent = {mActionController.GetControllerTipCoordinates(), mActionController.GetRotationMatrix()};
			
			// I say to the undo/redo manager that there was an action, and I pass a reference to the instance 
			// of this tool and I pass the content the will be useful for undo/redo
			mActionsListManager.AddAction(NotesTool::this, newActionContent);
		}
	}
}

function NotesTool::SetToolActive(active)
{
	if(!mIsToolActive && active)
		mAnimator.CreateScalingTransition(mColorPicker, [0, 0, 0], [1.0, 1.0, 1.0], 0.2, false, 2);
	else if(mIsToolActive && !active)	
		mAnimator.CreateScalingTransition(mColorPicker, [1, 1, 1], [0.0, 0.0, 0.0], 0.2, false, 2);
		
	// Calling the base class method
	Tool::this.SetToolActive(active); 
}

/*
 * This method is INHERITED by the base class Tool; I override it in order to play a little animation when the action
 * is available (i.e. the player is no longer pointing the menu and the preview note appears)
 */
function NotesTool::SetActionAvailable(isActionAvailable)
{
	// If there wasn't an action available and now there is, I make the preview note appear
	if(isActionAvailable && !misActionAvailable)
		mAnimator.CreateScalingTransition(mPreviewNote, [0, 0, 0], [1.0, 1.0, 1.0], 0.2, false, 2);	
	// If there was an action available and now there isn't anymore, I make the preview note disappear
	else if(!isActionAvailable && misActionAvailable)
		mAnimator.CreateScalingTransition(mPreviewNote, mPreviewNote.GetScale(), [0.0, 0.0, 0.0], 0.2, false, 2);	
		
	// I call the base class method only now because otherwise the misActionAvailable boolean always becomes equal to isActionAvailable
	Tool::this.SetActionAvailable(isActionAvailable); 
}


/*
 * This method undos the last action of this tool
 */
function NotesTool::UndoLastAction(content)
{
	// In this case I just remove the note from the array; note for improvement: instead of deallocating useful
	// elements from the array and creating new ones when the tool will be used again I could reuse them and change
	// the position/orientation/color of the notes. To do this a counter variable would be needed; so I could simply hide the note
	print("undo", mNotesList[len(mNotesList) - 1].GetPosition());
	adel(mNotesList, len(mNotesList) - 1);
}

/*
 * This method redos the last action of this tool.
 * 
 * "content" is an array that contains in the first index the position of the note and at the second index its orientation
 */
function NotesTool::RedoLastAction(content)
{
	// I need to create a note in the place of the last note added. So I create a new one; note for improvement: since I'm
	// redoing an "add" action, there was definitely a note before in the mNotesList array, so I could simply NOT remove it
	// from the array when I'm undoing and then when I'm redoing I simply take that note and make it visible again
	var newNote = CVmObj(mNoteMesh);
	
	// Setting the position and orientation of the note using the information from the content array
	newNote.SetPosition(content[0]);
	newNote.SetRotationMatrix(content[1]);

	aadd(mNotesList, newNote);
	
	print("redo", content[0]);
}
