 
/*
 * This classe represents the icon of a given Tool
 */
class ToolIcon
{
	// Sizes of the icon
	var mIconWidth;
	var mIconHeight;
	
	// Text object that is displayed when the icon is hovered
	var mToolNameObj;
	
	// Boolean that is true if the text object is visible
	var mToolNameTextVisible;
	
	// Obj of the icon
	var mIcon;
	
	// In order to check if the icon is being pointed (i.e. collides with a ray) I use another object that is almost always
	// positioned where the icon is positioned. Basically I do this to overcome problems with adding objects as children of
	// other objects when doing raytracing (the method IsColliding() doesn't work in that case). So, the icon itself
	// is used as child of the panel (this way I can easily animate it with transitions and stuff like that), while
	// the collision object is manually positioned over the icon (and when the icon is moved with an animation this object
	// DOES NOT follow the icon)
	var mIconCollisionObj;
	
	// Vector that holds the default position of the icon inside the panel in which is put. It's defined in the local
	// coordinate system of the panel, and it's calculated when the panel is created (because it needs to now how many
	// icons are in the panel in order to obtain the position)
	var mDefaultPosition;
	
	
	// Public functions
	Draw();
	GetWidth();
	GetHeight();
	GetObj();
	GetName();
	GetID();
	SetPosition(position);
	SetCollisionPosition(position);
	Translate(transl);
	GetPosition();
	SetRotationMatrix(matrix);
	SetCollisionRotationMatrix(matrix);
	GetRotationMatrix();
	Rotate(angle, x, y, z);
	SetRotation(angle, x, y, z);
	LocalToWorld(point);
	Hide();
	Unhide();
	SetScale(x, y, z);
	GetScale();
	IsVisible();
	IsCollidingBBox(object);
	
	IsColliding(rayOrigin, rayEnd, contactPoint);
	SetDefaultPosition(position);
	GetDefaultPosition();
	SetIconNameVisibility(visible);
};


/*
 * Constructor; takes as parameter the name of the texture to be used for the icon and the string name of the tool, 
 * that is displayed when the icon is hovered
 */
function ToolIcon::ToolIcon(textureString, name)
{
	mIconWidth = 0.15 * SCALE_FACTOR;
	mIconHeight = 0.15 * SCALE_FACTOR;
	
	var iconHalfWidth = mIconWidth / 2.0;
	var iconHalfHeight = mIconWidth / 2.0;
		
	mDefaultPosition = [0, 0, 0];
	
	var iconMesh = CVmNewMesh(VRP_PLANE, 1, [-iconHalfWidth, -iconHalfHeight, 0], [iconHalfWidth, iconHalfHeight, 0], 2, 2);
	var iconCollisionMesh = CVmNewMesh(VRP_PLANE, 1, [-iconHalfWidth, -iconHalfHeight, 0], [iconHalfWidth, iconHalfHeight, 0], 2, 2);
	
	var iconMaterial = CVmMaterial();
	iconMaterial.Ambient = [0, 0, 0];
	iconMaterial.Shininess = 0.05;
	iconMaterial.Specular = [0,0,0];
	iconMaterial.SetTexture(CVmTexture(textureString));
	
	iconMesh.SetMaterial(iconMaterial);
	
	mIcon = CVmObj(iconMesh);
	mIconCollisionObj = CVmObj(iconCollisionMesh);
	
	// Text object for the name that appears when the icon is hovered
	var nameText = Text(name, 0.2, [1, 1, 1]);
	
	// Sizes of the text
	var toolNameTextWidth = nameText.GetWidthOfLine(0) * 2.3;
	var toolNameTextHeight = nameText.GetFontHeight() * 1.5;
	
	// Container plane for the text
	mToolNameObj = CreateGlassPlane(toolNameTextWidth, toolNameTextHeight, 0.01 * SCALE_FACTOR, [1.0, 1.0, 1.0], 0.8);
	
	// Adding the text as child of the container
	mToolNameObj.AddChild(nameText.GetObj(), 0, -toolNameTextHeight / 4.0, 0.001 * SCALE_FACTOR);
	
	// Initially the name object is hidden
	mToolNameObj.Hide();
	mToolNameTextVisible = false;
	
	// Adding the name object as child of the icon itself
	mIcon.AddChild(mToolNameObj, mIconWidth * 1.5, 0, 0.0025 * SCALE_FACTOR);
}

/*
 * This method toogles the visibility of the tool icon name
 */
function ToolIcon::SetIconNameVisibility(visible)
{
	mToolNameTextVisible = visible;
	
	if(mToolNameTextVisible)
		mToolNameObj.Unhide();
	else
		mToolNameObj.Hide();
}

/*
 * This method sets the position of the collision plane, i.e. the plane that it's used to check the intersection with rays
 */
function ToolIcon::SetCollisionPosition(position)
{
	mIconCollisionObj.SetPosition(position);
}

/*
 * This method sets the rotation matrix of the collision plane, i.e. the plane that it's used to check the intersection with rays
 */
function ToolIcon::SetCollisionRotationMatrix(matrix)
{
	mIconCollisionObj.SetRotationMatrix(matrix);
}

function ToolIcon::Draw()
{
	// Disabling the light doesn't have any effects; lights will be used anyway
	glDisable(GL_LIGHTING);
	mIcon.Draw();
	glEnable(GL_LIGHTING);
}

function ToolIcon::GetWidth()
{
	return mIconWidth;
}


function ToolIcon::GetHeight()
{
	return mIconHeight;
}

function ToolIcon::IsColliding(rayOrigin, rayEnd, contactPoint)
{
	return mIconCollisionObj.IsColliding(rayOrigin, rayEnd, &contactPoint);
//	return mIcon.IsColliding(rayOrigin, rayEnd, &contactPoint);
}

function ToolIcon::GetObj()
{
	return mIcon;
}

function ToolIcon::SetPosition(position)
{
	mIcon.SetPosition(position);
}

function ToolIcon::GetPosition()
{
	return mIcon.GetPosition();
}

function ToolIcon::SetRotationMatrix(matrix)
{
	mIcon.SetRotationMatrix(matrix);
}

function ToolIcon::GetRotationMatrix()
{
	return mIcon.GetRotationMatrix();
}


function ToolIcon::Rotate(angle, x, y, z)
{
	mIcon.Rotate(angle, x, y, z);
}

function ToolIcon::SetRotation(angle, x, y, z)
{
	mIcon.SetRotation(angle, x, y, z);
}

function ToolIcon::LocalToWorld(point)
{
	return mIcon.LocalToWorld(point);
}

function ToolIcon::Hide()
{
	mIcon.Hide();
}

function ToolIcon::Unhide()
{
	mIcon.Unhide();
}

function ToolIcon::SetScale(x, y, z)
{
	mIcon.SetScale(x, y, z);
}

function ToolIcon::GetScale()
{
	return mIcon.GetScale();
}

//function ToolIcon::IsVisible()
//{
//	return mViveController.IsVisible();
//}

function ToolIcon::Translate(transl)
{
	mIcon.Translate(transl);
}

function ToolIcon::IsCollidingBBox(object)
{
	return mIcon.IsCollidingBBox(object);
}

function ToolIcon::SetDefaultPosition(position)
{
	mDefaultPosition = position;
}

function ToolIcon::GetDefaultPosition()
{
	return mDefaultPosition;
}
