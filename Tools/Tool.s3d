 
/*
 * This is an abstract class that represents a Tool and implements the basic things that each Tool has
 */
class Tool
{
	// Reference to the action controller. It's needed to almost every tool in order to check if the user 
	// pressed something, where he's pointing or whatever. So, it's needed to update the tool's logic
	var mActionController;
	
	// String and Text object containing the name of the tool
	var mToolNameString;
	var mToolNameText;
	
	// ToolIcon object containing the icon
	var mToolIcon;
	
	// Reference to the Panel object in which this tool is put. Used to put as child of the panel the elements in the Tool
	var mPanel;
	
	// Boolean that is true when the tool is selected by the user
	var mIsToolActive;
	
	// Boolean that is true when an action is available (for example, for the notes tool it becomes true when the user can place notes)
	var mIsActionAvailable;
	
	// Reference to the Animator object in order to create animations
	var mAnimator;
	
	// Reference to the ActionsListManager in order to have access to the undo/redo mechanism
	var mActionsListManager;
	
	// This method works as the constructor for the class: the classes that will inherit from this class will need to call
	// this in their constructor as the first call 
	Init(textureString, name, panel, actionController, animator, actionsListManager);
	
	// Public functions
	Draw();
	GetIconObj();
	IsToolActive();
	SetToolActive(active);
	SetActionAvailable(actionAvailable);
	GetName();
	
	SetPosition(position);
	Translate(transl);
	GetPosition();
	SetRotationMatrix(matrix);
	GetRotationMatrix();
	Rotate(angle, x, y, z);
	SetRotation(angle, x, y, z);
	LocalToWorld(point);
	Hide();
	Unhide();
	SetScale(x, y, z);
	GetScale();
	IsVisible();
	IsCollidingBBox(object);
};


function Tool::Tool()
{

}

/*
 * Method that works as constructor.
 * 
 * textureString: string object containing the URL to the image used as icon for the tool
 * name: string containing the name of the tool
 * actionController: ActionController reference
 * animator: Animator reference
 * actionsListManager: ActionsListManager reference
 */
function Tool::Init(textureString, name, panel, actionController, animator, actionsListManager)
{
	mToolNameString = name;
	mPanel = panel;
	mActionController = actionController;
	mAnimator = animator;
	mActionsListManager = actionsListManager;
	
	// Creating the text object and putting it as child of the panel. I also make it invisible for now, since no tool 
	// is selected at the start
	mToolNameText = Text(name, 0.3, [1, 1, 1]);
	mPanel.AddChild(mToolNameText.GetObj(), 0.05 * SCALE_FACTOR, mPanel.GetHeight() / 2.0 - mToolNameText.GetFontHeight(), 0.001 * SCALE_FACTOR);
	mToolNameText.Hide();
	
	// Creating the tool icon
	mToolIcon = ToolIcon(textureString, name);
	
	mIsToolActive = false;
	mIsActionAvailable = false;
}

function Tool::IsToolActive()
{
	return mIsToolActive;
}

function Tool::SetActionAvailable(actionAvailable)
{
	mIsActionAvailable = actionAvailable;
}

/*
 * This method is called when the tool is selected or deselected
 */
function Tool::SetToolActive(active)
{
	mIsToolActive = active;
	
	// I show/hide the Text object
	mToolNameText.SetVisibility(active);
	
	// If the tool is being selected I play a little scaling animation on the Text object. If it's the other way around I
	// don't do it because I would need to add checks to keep drawing the text until the scale reaches 0 and it's a pain in the ass
	if(active)
	{
		var initialTextScale = [1, 0, 1];
		
		// For the ending scale I cheat: basically I want to start the animation a little later, when the scaling animation
		// of the panels own Text object ends. I don't know when it ends, but I'm assuming that it lasts for 0.2, so
		// to make a delay I simply set a waypoint for the ending scale that does nothing, and then the actual scale begins
		var endingTextScale = {initialTextScale, [1, 1, 1]};
		
		mAnimator.CreateScalingTransition(mToolNameText.GetObj(), initialTextScale, endingTextScale, 0.2, false, 2);
	}
}

function Tool::Draw()
{
	mToolIcon.Draw();
}

function Tool::GetIconObj()
{
	return mToolIcon;
}

function Tool::GetName()
{
	return mToolNameString;
}

function Tool::SetPosition(position)
{
//	mIcon.SetPosition(position);
}

function Tool::GetPosition()
{
//	return mIcon.GetPosition();
}

function Tool::SetRotationMatrix(matrix)
{
//	mIcon.SetRotationMatrix(matrix);
}

function Tool::GetRotationMatrix()
{
//	return mIcon.GetRotationMatrix();
}


function Tool::Rotate(angle, x, y, z)
{
//	mIcon.Rotate(angle, x, y, z);
}

function Tool::SetRotation(angle, x, y, z)
{
//	mIcon.SetRotation(angle, x, y, z);
}

function Tool::LocalToWorld(point)
{
//	return mIcon.LocalToWorld(point);
}

function Tool::Hide()
{
//	mToolIcon.Hide();
}

function Tool::Unhide()
{
//	mToolIcon.Unhide();
}

function Tool::SetScale(x, y, z)
{
//	mIcon.SetScale(x, y, z);
}

function Tool::GetScale()
{
//	return mIcon.GetScale();
}

//function Tool::IsVisible()
//{
//	return mViveController.IsVisible();
//}

function Tool::Translate(transl)
{
//	mIcon.Translate(transl);
}

function Tool::IsCollidingBBox(object)
{
//	return mIcon.IsCollidingBBox(object);
}

