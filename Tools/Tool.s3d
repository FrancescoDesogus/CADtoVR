 
class Tool
{
	var mActionController;
	
	// String containing the name of the tool this icon represents
	var mToolNameString;
	
	// ID of the tool
//	var mToolID;
	
	// ToolIcon object containing the icon
	var mToolIcon;
	
	var mPanel;
	
	var mToolNameText;
	
	var mIsToolActive;
	
	var mAnimator;
	
	var mActionsListManager;
	
	var mActionAvailable;
	
	
	// Public functions
	Draw();
	GetIconWidth();
	GetIconHeight();
	GetIconObj();
	GetName();
	GetID();
	SetPosition(position);
	SetIconCollisionPosition(position);
	Translate(transl);
	GetPosition();
	SetRotationMatrix(matrix);
	SetIconCollisionRotationMatrix(matrix);
	GetRotationMatrix();
	Rotate(angle, x, y, z);
	SetRotation(angle, x, y, z);
	LocalToWorld(point);
	Hide();
	Unhide();
	SetScale(x, y, z);
	GetScale();
	IsVisible();
	IsCollidingBBox(object);
	
	IsIconColliding(rayOrigin, rayEnd, contactPoint);
	IsToolActive();
	SetToolActive(active);
//	UpdateLogic(dt, viveController);
	SetActionAvailable(actionAvailable);

	Init(textureString, name, panel, actionController, animator, actionsListManager);
};


function Tool::Tool(textureString, name, panel, actionController, animator)
{
//	mToolNameString = name;
////	mToolID = id;
//	mPanel = panel;
//	mAnimator = animator;
//	
//	mToolNameText = Text(name, 0.3, [1, 1, 1]);
//	mPanel.AddChild(mToolNameText.GetObj(), 0.05 * SCALE_FACTOR, mPanel.GetHeight() / 2.0 - mToolNameText.GetFontHeight(), 0.01 * SCALE_FACTOR);
//	mToolNameText.Hide();
//	
//	mToolIcon = ToolIcon(textureString, name);
//	
//	mIsToolActive = false;
}

function Tool::Init(textureString, name, panel, actionController, animator, actionsListManager)
{
	mToolNameString = name;
	mPanel = panel;
	mActionController = actionController;
	mAnimator = animator;
	mActionsListManager = actionsListManager;
	
	
	mToolNameText = Text(name, 0.3, [1, 1, 1]);
	mPanel.AddChild(mToolNameText.GetObj(), 0.05 * SCALE_FACTOR, mPanel.GetHeight() / 2.0 - mToolNameText.GetFontHeight(), 0.01 * SCALE_FACTOR);
	mToolNameText.Hide();
	
	mToolIcon = ToolIcon(textureString, name);
	
	mIsToolActive = false;
	mActionAvailable = false;
}

function Tool::IsToolActive()
{
	return mIsToolActive;
}

function Tool::SetActionAvailable(actionAvailable)
{
	mActionAvailable = actionAvailable;
}

function Tool::SetToolActive(active)
{
	mIsToolActive = active;
	
	mToolNameText.SetVisibility(active);
	
	var initialTextScale = [1, 0, 1];
	var endingTextScale = {initialTextScale, [1, 1, 1]};
	
	if(!active)
	{
		initialTextScale = [1, 1, 1];
		endingTextScale = [1, 0, 1];
	}
		
	mAnimator.CreateScalingTransition(mToolNameText.GetObj(), initialTextScale, endingTextScale, 0.2, false, 2);
}

function Tool::Draw()
{
	glDisable(GL_LIGHTING);
	mToolIcon.Draw();
	glEnable(GL_LIGHTING);
	
	if(mIsToolActive)
	{
		
	}
}

function Tool::GetIconObj()
{
	return mToolIcon;
}

function Tool::GetName()
{
	return mToolNameString;
}

//function Tool::GetID()
//{
//	return mToolID;	
//}

function Tool::SetPosition(position)
{
//	mIcon.SetPosition(position);
}

function Tool::GetPosition()
{
//	return mIcon.GetPosition();
}

function Tool::SetRotationMatrix(matrix)
{
//	mIcon.SetRotationMatrix(matrix);
}

function Tool::GetRotationMatrix()
{
//	return mIcon.GetRotationMatrix();
}


function Tool::Rotate(angle, x, y, z)
{
//	mIcon.Rotate(angle, x, y, z);
}

function Tool::SetRotation(angle, x, y, z)
{
//	mIcon.SetRotation(angle, x, y, z);
}

function Tool::LocalToWorld(point)
{
//	return mIcon.LocalToWorld(point);
}

function Tool::Hide()
{
//	mToolIcon.Hide();
}

function Tool::Unhide()
{
//	mToolIcon.Unhide();
}

function Tool::SetScale(x, y, z)
{
//	mIcon.SetScale(x, y, z);
}

function Tool::GetScale()
{
//	return mIcon.GetScale();
}

//function Tool::IsVisible()
//{
//	return mViveController.IsVisible();
//}

function Tool::Translate(transl)
{
//	mIcon.Translate(transl);
}

function Tool::IsCollidingBBox(object)
{
//	return mIcon.IsCollidingBBox(object);
}

