
/*
 * This class is basically a CVmActionsListManager but a little better, since it allows to put string with "\n" and automatically center the position of the strings
 */
class ActionsListManager 
{
	var mActionsArray;
	var mActionsArrayIndex;
	var mActionsArraySize;

	// Public functions
	AddAction(tool, content);
	GetLastActionTool();
	GetNextActionTool();
	GetLastActionContent();
	GetNextActionContent();
	IsUndoAvailable();
	IsRedoAvailable();
	UndoDone();
	RedoDone();
};


function ActionsListManager::ActionsListManager()
{
	mActionsArray = {};
	mActionsArrayIndex = 0;
	mActionsArraySize = 0;
}

function ActionsListManager::AddAction(tool, content)
{
	var newAction = {tool, content};
	
	if(mActionsArrayIndex >= len(mActionsArray))
		aadd(mActionsArray, newAction);
	else
		mActionsArray[mActionsArrayIndex] = newAction;
		
	mActionsArrayIndex++;
	
	// Quando si esegue una nuova azione, la grandezza dell'array fittizia è pari al valore dell'indice
	mActionsArraySize = mActionsArrayIndex;
}

function ActionsListManager::GetLastActionTool()
{
	var lastAction = mActionsArray[mActionsArrayIndex - 1];
	
	return lastAction[0];
}

function ActionsListManager::GetNextActionTool()
{
	var lastAction = mActionsArray[mActionsArrayIndex];
	
	return lastAction[0];
}

function ActionsListManager::GetLastActionContent()
{
	var lastAction = mActionsArray[mActionsArrayIndex - 1];
	
	return lastAction[1];
}

function ActionsListManager::GetNextActionContent()
{
	var lastAction = mActionsArray[mActionsArrayIndex ];
	
	return lastAction[1];
}

function ActionsListManager::UndoDone()
{	
	mActionsArrayIndex--;
}

function ActionsListManager::RedoDone()
{	
	mActionsArrayIndex++;
}


function ActionsListManager::IsUndoAvailable()
{	
	return mActionsArrayIndex > 0;
}

function ActionsListManager::IsRedoAvailable()
{	
	return mActionsArrayIndex < mActionsArraySize;
}

