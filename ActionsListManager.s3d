
/*
 * This class keeps track of the actions done by the user and allow him/her to undo/redo actions.
 * The usage is like this: when a given tool does something it must call the AddAction() method passing a reference to itself
 * and passing the content that would use later in case of undo or redo.
 * When the user presses the button for undo/redo, the method IsUndo/RedoAvailable() must be called to check whether the undo/redo
 * can be done now, and in that case the Undo/RedoLastAction() needs to be called.
 */
class ActionsListManager 
{
	// This array contains the actions done by the player; each element of the array is another array that contains in the
	// first position the reference to the tool used for the action, and in the second position another array containing
	// ANY information that the tool would need in case of an undo/redo operation
	var mActionsArray;
	
	// This integer contains the index of the last action in the array; even though it's used as a stack I need this so
	// that when undos are applied the array is not reallocated and the vacant positions at the end of the array are reused
	var mActionsArrayIndex;
	
	// This integer contains the current size of the array, but not the physical size, meaning that the array might have 5 
	// elements but if this integer's value is 3 then only 3 elements of the array are used and the rest will be considered
	// vacant, and will be used when new actions are created
	var mActionsArraySize;

	// Public functions
	AddAction(tool, content);
	UndoLastAction();
	RedoLastAction();
	IsUndoAvailable();
	IsRedoAvailable();
	
	// Not used functions
	GetLastActionTool();
	GetNextActionTool();
	GetLastActionContent();
	GetNextActionContent();
	UndoDone();
	RedoDone();
};


/*
 * The constructor simply initializes the array and the counters
 */
function ActionsListManager::ActionsListManager()
{
	mActionsArray = {};
	mActionsArrayIndex = 0;
	mActionsArraySize = 0;
}

/*
 * This method adds an action to the array. It's called by the Tool objects when they do something "undoable"
 * 
 * tool: reference to the Tool object that did the action
 * content: an array containing any useful information for the tool in order to undo/redo the action later
 */
function ActionsListManager::AddAction(tool, content)
{
	// I create the new action as an array that has as first position the reference to the tool
	var newAction = {tool, content};
	
	// I check whether the array reached max capacity, and in that case I allocate a new element
	if(mActionsArrayIndex >= len(mActionsArray))
		aadd(mActionsArray, newAction);
	// Otherwise, I simply reuse the next vacant slot
	else
		mActionsArray[mActionsArrayIndex] = newAction;
		
	// I update the counter and the used size of the array to the new value (the array might be bigger though)
	mActionsArrayIndex++;
	mActionsArraySize = mActionsArrayIndex;
}

/*
 * This method undos the last action saved in the array, if there was any
 */
function ActionsListManager::UndoLastAction()
{
	// I only procede if we can undo (i.e. if there actually is an action to undo)
	if(IsUndoAvailable())
	{
		// Getting the last action from the array; the object is an array
		var lastAction = mActionsArray[mActionsArrayIndex - 1];
		
		// Getting the reference to the tool and the content
		var lastToolUsed = lastAction[0];
		var lastToolUsedContent = lastAction[1];
			
		// Using the tool reference we undo the action
		lastToolUsed.UndoLastAction(lastToolUsedContent);
		
		// Updating the counter
		mActionsArrayIndex--;
	}
}

/*
 * This method redos the next action saved in the array, if there was any. The method is analogous to the undo one
 */
function ActionsListManager::RedoLastAction()
{
	if(IsRedoAvailable())
	{
		// Getting the NEXT element this time
		var lastAction = mActionsArray[mActionsArrayIndex];
		var lastToolUsed = lastAction[0];
		var lastToolUsedContent = lastAction[1];
			
		lastToolUsed.RedoLastAction(lastToolUsedContent);
		
		mActionsArrayIndex++;
	}
}

function ActionsListManager::IsUndoAvailable()
{	
	return mActionsArrayIndex > 0;
}

function ActionsListManager::IsRedoAvailable()
{	
	// The redo is available if the conter is below the used size of the array
	return mActionsArrayIndex < mActionsArraySize;
}