//#include "ActionsListManager.s3d"
//#include "ToolsMenu.s3d"

/*
 * This class handles the controller the has the menu on it
 */
class MenuController
{
	// Reference to the vive controller and its index
	var mViveController;
	var mControllerIndex;
	
	// Reference to the InputManager class
	var mInputManager;

	
	// Public functions
	UpdateLogic(dt, debugMode);
	
	// Common functions
	Draw();
	GetObj();
	GetIndex();
	GetHeight();
	GetWidth();
	GetDepth();
	SetActionAvailable(isActionAvailable);
	GetControllerTipCoordinates();
	GetDirection();
	SetPosition(position);
	Translate(transl);
	GetPosition();
	SetRotationMatrix(matrix);
	GetRotationMatrix();
	Rotate(angle, x, y, z);
	SetRotation(angle, x, y, z);
	LocalToWorld(point);
	Hide();
	Unhide();
	SetScale(x, y, z);
	IsVisible();
	IsCollidingBBox(object);
};

/*
 * Constructor
 * 
 * viveController: reference to the ViveController object
 * inputManager: reference to the InputManager object
 */
function MenuController::MenuController(viveController, inputManager)
{
	mViveController = viveController;
	mControllerIndex = mViveController.GetIndex();
	mInputManager = inputManager;
}

/* 
 * This method updates the menu controller logic and that of the menu
 */
function MenuController::UpdateLogic(dt, isVRon)
{
	if(!isVRon)
	{
		static var rotX = 0;
		static var rotY = 0;
		static var rotZ = 0;
			
		if(KeyPressed("F"))
			rotX += 1;
		
		if(KeyPressed("H"))
			rotX -= 1;
			
		if(KeyPressed("T"))
			rotY += 1;
		
		if(KeyPressed("G"))
			rotY -= 1;
			
		if(KeyPressed("R"))
			rotZ += 1;
		
		if(KeyPressed("Y"))
			rotZ -= 1;
		
		mViveController.SetRotation(0, 1, 0, 0);
		mViveController.Rotate(rotY, 1, 0, 0);
		mViveController.Rotate(rotX, 0, 1, 0);
		mViveController.Rotate(rotZ, 0, 0, 1);
		
		
		static var xOffset = 0;
		static var yOffset = 0;
		static var zOffset = 0;
		
		if(KeyPressed("L"))
			xOffset += 0.05 * SCALE_FACTOR;
		
		if(KeyPressed("J"))
			xOffset -= 0.05 * SCALE_FACTOR;
			
		if(KeyPressed("I"))
			zOffset += 0.05 * SCALE_FACTOR;
		
		if(KeyPressed("K"))
			zOffset -= 0.05 * SCALE_FACTOR;
			
//		if(KeyPressed(VK_NUMPAD1))
//			yOffset += 1.0 * SCALE_FACTOR;
//		
//		if(KeyPressed(VK_RSHIFT))
//			yOffset -= 1.0 * SCALE_FACTOR;
//			

		mViveController.SetPosition(mViveController.GetPosition() + [xOffset, yOffset, zOffset]);
	}
}

function MenuController::Draw()
{
	mViveController.Draw(VR_NO_CULLING);
}

function MenuController::GetObj()
{
	return mViveController.GetObj();
//	return mMenuController;
}

function MenuController::GetIndex()
{
	return mControllerIndex;
}

function MenuController::GetWidth()
{
	return mViveController.GetWidth();
}

function MenuController::GetHeight()
{
	return mViveController.GetHeight();
}

function MenuController::GetDepth()
{
	return mViveController.GetDepth();
}

function MenuController::SetActionAvailable(isActionAvailable)
{
	mViveController.SetActionAvailable(isActionAvailable);
}

function MenuController::GetControllerTipCoordinates()
{
	return mViveController.GetControllerTipCoordinates();
}

function MenuController::GetDirection()
{
	return mViveController.GetDirection();
}

function MenuController::SetPosition(position)
{
	mViveController.SetPosition(position);
}

function MenuController::GetPosition()
{
	return mViveController.GetPosition();
}

function MenuController::SetRotationMatrix(matrix)
{
	mViveController.SetRotationMatrix(matrix);
}

function MenuController::GetRotationMatrix()
{
	return mViveController.GetRotationMatrix();
}


function MenuController::Rotate(angle, x, y, z)
{
	mViveController.Rotate(angle, x, y, z);
}

function MenuController::SetRotation(angle, x, y, z)
{
	mViveController.SetRotation(angle, x, y, z);
}

function MenuController::LocalToWorld(point)
{
	return mViveController.LocalToWorld(point);
}

function MenuController::Hide()
{
	mViveController.Hide();
}

function MenuController::Unhide()
{
	mViveController.Unhide();
}

function MenuController::SetScale(x, y, z)
{
	mViveController.SetScale(x, y, z);
}

function MenuController::IsVisible()
{
	return mViveController.IsVisible();
}

function MenuController::Translate(transl)
{
	mViveController.Translate(transl);
}

function MenuController::IsCollidingBBox(object)
{
	return mViveController.IsCollidingBBox(object);
}
