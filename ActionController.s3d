 
class ActionController
{
	var mViveController;
	var mControllerIndex;
	
	var mInputManager;
	
	var mMenuRayColor;
	var mRayEnd;
	var mDrawRay;
	
	var mDashedLineShader;
	var mDashedLinesOffset;
	
	var mPointingCircle;
	
	var mAnimator;
	
	
	// Public functions
	Draw();
	GetObj();
	GetIndex();
	SetActionAvailable(isActionAvailable);
	GetControllerTipCoordinates();
	GetDirection();
	SetPosition(position);
	Translate(transl);
	GetPosition();
	SetRotationMatrix(matrix);
	GetRotationMatrix();
	Rotate(angle, x, y, z);
	SetRotation(angle, x, y, z);
	LocalToWorld(point);
	Hide();
	Unhide();
	SetScale(x, y, z);
	IsVisible();
	IsCollidingBBox(object);
	
	UpdateLogic(dt, debugMode);
	SetDrawRay(drawRay, rayEnd, contactNormal);
	IsPressingPrimaryButton();
	PrimaryButtonSinglePressed();
};


function ActionController::ActionController(viveController, inputManager)
{
	mViveController = viveController;
	mControllerIndex = mViveController.GetIndex();
	mInputManager = inputManager;
	
//	mMenuRayColor = [0.41, 0.8, 0.36];
	mMenuRayColor = [0.71, 0.8, 0.66];
	mRayEnd = [0, 0, 0];
	mDrawRay = false;
	
	var pointingCircleMesh = CVmNewMesh(VRP_CIRCLE, 30, 0.04 * SCALE_FACTOR, 1); 

	var pointingCircleMaterial = CVmMaterial();
	pointingCircleMaterial.Ambient = [0, 0, 0];
	pointingCircleMaterial.diffuse = mMenuRayColor;
	pointingCircleMaterial.Specular = [0, 0, 0];
	pointingCircleMaterial.SetTexture(CVmTexture("Textures/selectionCircle.png"));
	pointingCircleMesh.SetMaterial(pointingCircleMaterial);
	
	mPointingCircle = CVmObj(pointingCircleMesh);
	
	mDashedLineShader = CVmShaderProgram("Shaders/dashedLineShader.glsl");
	mDashedLinesOffset = 0;
	
	mAnimator = Animator();
	
	mAnimator.CreateScalingTransition(mPointingCircle, [0.6, 0.6, 0.6], [1.0, 1.0, 1.0], 0.7, true, 3);
}

function ActionController::UpdateLogic(dt, debugMode)
{
	if(!debugMode && !USE_DEBUG_MOUSE)
	{
		static var rotX = 0;
		static var rotY = 0;
		static var rotZ = 0;
		static var multiplier = 1.0;
		
		if(KeyPressed(VK_SPACE))
			multiplier = 0.1;
		else
			multiplier = 1.0;
			
		if(KeyPressed(VK_NUMPAD4))
			rotX += 1 * multiplier;
		
		if(KeyPressed(VK_NUMPAD6))
			rotX -= 1 * multiplier;
			
		if(KeyPressed(VK_NUMPAD8))
			rotY += 1 * multiplier;
		
		if(KeyPressed(VK_NUMPAD5))
			rotY -= 1 * multiplier;
			
		if(KeyPressed(VK_NUMPAD7))
			rotZ += 1 * multiplier;
		
		if(KeyPressed(VK_NUMPAD9))
			rotZ -= 1 * multiplier;
		
		mViveController.SetRotation(0, 1, 0, 0);
		mViveController.Rotate(rotY, 1, 0, 0);
		mViveController.Rotate(rotX, 0, 1, 0);
		mViveController.Rotate(rotZ, 0, 0, 1);
		
		static var xOffset = 0;
		static var yOffset = 0;
		static var zOffset = 0;
		

		
		
		if(KeyPressed(VK_RIGHT))
			xOffset += 0.05 * SCALE_FACTOR;
		
		if(KeyPressed(VK_LEFT))
			xOffset -= 0.05 * SCALE_FACTOR;
			
		if(KeyPressed(VK_DOWN))
			zOffset += 0.05 * SCALE_FACTOR;
		
		if(KeyPressed(VK_UP))
			zOffset -= 0.05 * SCALE_FACTOR;
			
//		if(KeyPressed(VK_NUMPAD1))
//			yOffset += 1.0 * SCALE_FACTOR;
//		
//		if(KeyPressed(VK_RSHIFT))
//			yOffset -= 1.0 * SCALE_FACTOR;
//			
		mViveController.SetPosition(mViveController.GetPosition() + [xOffset, yOffset, zOffset]);
	}
	
	mDashedLinesOffset += 0.001;
	
	mAnimator.UpdateTransitions(dt);
}

function ActionController::SetDrawRay(drawRay, rayEnd, contactNormal)
{
	mDrawRay = drawRay;
	
	if(mDrawRay)
	{
		mRayEnd = rayEnd;
		
		mPointingCircle.SetPosition(mRayEnd - contactNormal * 0.002 * SCALE_FACTOR);
		
		// Now I need to rotate the circle to face the normal vector, so that it points in the right direction.
		// To compute the angle around which to rotate the object, I compute the cross product between this vector and the up vector (the vector
		// that tells me which way is up); the result will be a vector perpendicular to the 2, which I normalize to use it as a normal.
		// I then switch sign, otherwise it turns on the opposite side
		var axis = -Norm(contactNormal ^ [0, 1, 0]);
		
		// I now compute the angle for the rotation. The formula derives from "easy" trigonometry (lookup "finding angle between 2 vectors").
		// I'm not sure why the final angle is shifted by 180 degrees; that's why I subtract 180
		var angle = acos(contactNormal * [0, 1, 0]) * RAD_TO_GRAD - 180; 
		
		mPointingCircle.SetRotation(angle, axis.x, axis.y, axis.z);
	}
}

function ActionController::Draw()
{
	mViveController.Draw(VR_NO_CULLING);
	
	if(mDrawRay)
	{
		var rayOrigin = GetPosition();
		
		// Rendering of the ray
		mDashedLineShader.Start();
			// Parameters for the ray's shader
			mDashedLineShader.SetParameter("sourcePosition", rayOrigin);
			mDashedLineShader.SetParameter("lineLength", Modulus(mRayEnd - rayOrigin));
			mDashedLineShader.SetParameter("color", mMenuRayColor);
			mDashedLineShader.SetParameter("ticksLength", 0.17 * SCALE_FACTOR);
			mDashedLineShader.SetParameter("offset", mDashedLinesOffset);
			
			glLineWidth(1.5); 
			
			// I draw the ray as a simple opengl line
			glBegin(GL_LINES);
				glVertex(rayOrigin);
				glVertex(mRayEnd);		
			glEnd();
		mDashedLineShader.Stop();
		
		mPointingCircle.Draw();
	}
}

function ActionController::IsPressingPrimaryButton()
{
	return mInputManager.IsPressingPrimaryButton(mViveController.GetIndex());
}

function ActionController::PrimaryButtonSinglePressed()
{
	return mInputManager.PrimaryButtonSinglePressed(mViveController.GetIndex());
}

function ActionController::GetObj()
{
	return mViveController.GetObj();
}

function ActionController::GetIndex()
{
	return mControllerIndex;
}

function ActionController::SetActionAvailable(isActionAvailable)
{
	mViveController.SetActionAvailable(isActionAvailable);
}

function ActionController::GetControllerTipCoordinates()
{
	return mViveController.GetControllerTipCoordinates();
}

function ActionController::GetDirection()
{
	return mViveController.GetDirection();
}

function ActionController::SetPosition(position)
{
	mViveController.SetPosition(position);
}

function ActionController::GetPosition()
{
	return mViveController.GetPosition();
}

function ActionController::SetRotationMatrix(matrix)
{
	mViveController.SetRotationMatrix(matrix);
}

function ActionController::GetRotationMatrix()
{
	return mViveController.GetRotationMatrix();
}


function ActionController::Rotate(angle, x, y, z)
{
	mViveController.Rotate(angle, x, y, z);
}

function ActionController::SetRotation(angle, x, y, z)
{
	mViveController.SetRotation(angle, x, y, z);
}

function ActionController::LocalToWorld(point)
{
	return mViveController.LocalToWorld(point);
}

function ActionController::Hide()
{
	mViveController.Hide();
}

function ActionController::Unhide()
{
	mViveController.Unhide();
}

function ActionController::SetScale(x, y, z)
{
	mViveController.SetScale(x, y, z);
}

function ActionController::IsVisible()
{
	return mViveController.IsVisible();
}

function ActionController::Translate(transl)
{
	mViveController.Translate(transl);
}

function ActionController::IsCollidingBBox(object)
{
	return mViveController.IsCollidingBBox(object);
}
