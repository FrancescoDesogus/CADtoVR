#include "ActionsListManager.s3d"
#include "ToolsMenu.s3d"

/*
 * This class handles the interaction part of the application, i.e. the controllers, the menu and the tools
 */
class InteractionManager
{
	// Reference to the MenuController object
	var mMenuController;
	
	// Reference to the ActionController object
	var mActionController;
	
	// Reference to the InputManager class
	var mInputManager;
	
	// ToolsMenu object
	var mToolsMenu;
	
	// ActionsListManager object that is in charge of the undo/redo mechanism
	var mActionsListManager;
	
	
	// Public functions
	UpdateLogic(dt, debugMode);
	Draw();
};

/*
 * Constructor
 * 
 * menuController: reference to the MenuController object
 * actionController: reference to the ActionController object
 * inputManager: reference to the InputManager object
 */
function InteractionManager::InteractionManager(menuController, actionController, inputManager)
{
	mMenuController = menuController;
	mActionController = actionController;
	mInputManager = inputManager;
	
	// Creating the object that handles undo/redo
	mActionsListManager = ActionsListManager();
	
	// Creating the tool menu object
	mToolsMenu = ToolsMenu(mMenuController, mActionController, mActionsListManager);
}

/* 
 * This method updates the controllers, the menu and its tools
 */
function InteractionManager::UpdateLogic(dt, isVRon)
{
	// Updating the logic of the controllers
	mActionController.UpdateLogic(dt, isVRon);
	mMenuController.UpdateLogic(dt, isVRon);
	
	// Updating the logic of the menu. It will update its position with respect to the menu controller and 
	// will check if the action controller intersects the menu
	mToolsMenu.UpdateLogic(dt);
	
	// If the action controller intersects the tool panel, this method retrieves an array containing at the first position
    // the actual contact point and at the second the normal; if no intersection was found, it returns Void
	var contactInfo = mToolsMenu.IsIntersectionFound();
	
	var intersectionWasFound = contactInfo != Void;
	
	// If there was an intersection I need to check if the action controller's buttons are pressed
	if(intersectionWasFound)
	{
		// In case there was an intersection, I tell the action controller to draw the ray from the controller to the contact point found.
		mActionController.SetDrawRay(intersectionWasFound, contactInfo[0], contactInfo[1]);
		
		// If the trigger is pressed, I select the current hovered tool. If the action controller is just pointing the panel
		// and not hovering any particular tool, this call will have no effect; if a tool in ANOTHER panel was active, it
		// will deactivate it instead
		if(mInputManager.PrimaryButtonSinglePressed(mActionController.GetIndex()))
			mToolsMenu.SelectCurrentHoveredTool();
	}
	// If there wasn't an intersection, I call the method anyway to stop the rendering of the ray, in case it was being drawn before
	else
		mActionController.SetDrawRay(intersectionWasFound);
	
	// If in the menu controller the grip is pressed, it deselects the current tool (if no tool was selected it has no effects)
	if(mInputManager.GripSinglePressed(mMenuController.GetIndex()))
		mToolsMenu.DeSelectCurrentTool();
	
	// If in the tool menu the touchpad left/right are pressed, it will undo/redo actions
	if(mInputManager.TouchpadLeftSinglePressed(mMenuController.GetIndex()))
		mActionsListManager.UndoLastAction();
	else if(mInputManager.TouchpadRightSinglePressed(mMenuController.GetIndex()))
		mActionsListManager.RedoLastAction();
		
		
//	if(mInputManager.TouchpadLeftSinglePressed(mMenuController.GetIndex()))
//		mToolsMenu.RotatePanels(true);
//	else if(mInputManager.TouchpadRightSinglePressed(mMenuController.GetIndex()))
//		mToolsMenu.RotatePanels(false);
//	if(mInputManager.TouchpadLeftSinglePressed(mMenuController.GetIndex()))
//		mAnimator.CreateRotatingTransition(mToolsMenu.GetObj(), 0, -90, [0, 1, 0], 1.0, false, false);
//	else if(mInputManager.TouchpadRightSinglePressed(mMenuController.GetIndex()))
//		mAnimator.CreateRotatingTransition(mToolsMenu.GetObj(), 0, 90, [0, 1, 0], 1.0, false, false);
}

/*
 * This method draws the controllers and the tools menu
 */
function InteractionManager::Draw()
{
//	glDepthMask(GL_FALSE);
	mMenuController.Draw();
	mActionController.Draw();	
//	glDepthMask(GL_TRUE);
	
	// Since the menu are composed of semi-transparent panels, it should be rendered last
	mToolsMenu.Draw();
}

