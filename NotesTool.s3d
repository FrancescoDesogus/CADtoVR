
class NotesTool : Tool
{
	var mTemporaryNote;
	
	var mNotesList;
	var mNoteMesh;
	
	var mPostItShader;
	
	// Public functions
	UpdateLogic(dt);
	
	Draw();
	UndoLastAction(content);
	RedoLastAction(content);
};


function NotesTool::NotesTool(panel, actionController, animator, actionsListManager)
{
	// Calling the method that works as constructor for the parent class
	Tool::this.Init("Textures/icons/notes.png", "Annotations", panel, actionController, animator, actionsListManager);
	
//	mPostItObj = CreateGlassPlane(0.5 * SCALE_FACTOR, 0.5 * SCALE_FACTOR, 0.01 * SCALE_FACTOR, [1.0, 1.0, 1.0], 0.5);
	
	var postItHalfWidth = 0.5 * SCALE_FACTOR / 2.0;
	var postItHalfHeight = 0.5 * SCALE_FACTOR / 2.0;
	
	mNoteMesh = CVmNewMesh(VRP_PLANE, 1, [-postItHalfWidth, -postItHalfHeight, 0], [postItHalfWidth, postItHalfHeight, 0], 2, 2);
	
//	var postItMaterial = CVmMaterial();
//	postItMaterial.Ambient = [0, 0, 0];
//	postItMaterial.Shininess = 0.05;
//	postItMaterial.Specular = [0,0,0];
//	postItMaterial.SetTexture(CVmTexture("Textures/postit.png"));
//	
//	postItMesh.SetMaterial(postItMaterial);
	
	mTemporaryNote = CVmObj(mNoteMesh);
	
	mPostItShader = CVmShaderProgram("Shaders/postItShader.glsl");
	
	mNotesList = {};
}


function NotesTool::Draw()
{
	// Calling the base class method
	Tool::this.Draw(); 

	mPostItShader.Start();
		mPostItShader.SetParameter("tex", CVmTexture("Textures/postit.png"));
		
		if(IsToolActive())
			mTemporaryNote.Draw();
		
		foreach(var note in mNotesList)
			note.Draw();
	mPostItShader.Stop();
}

/*
 * This method currently only updates the position of the icons in the panel
 */
function NotesTool::UpdateLogic(dt)
{
	if(IsToolActive())
	{
		mTemporaryNote.SetPosition(mActionController.GetControllerTipCoordinates());
		mTemporaryNote.SetRotationMatrix(mActionController.GetRotationMatrix());
		
		if(mActionController.PrimaryButtonSinglePressed())
		{
			aadd(mNotesList, mTemporaryNote);
			
			mTemporaryNote = CVmObj(mNoteMesh);
			
			mAnimator.CreateScalingTransition(mTemporaryNote, [0, 0, 0], [1.0, 1.0, 1.0], 0.2, false, 2);	
			
			var newActionContent = {mActionController.GetControllerTipCoordinates(), mActionController.GetRotationMatrix()};
			
			mActionsListManager.AddAction(NotesTool::this, newActionContent);
			
			print("added", mActionController.GetControllerTipCoordinates());
		}
	}
}


function NotesTool::UndoLastAction(content)
{
	print("undo", mNotesList[len(mNotesList) - 1].GetPosition());
	adel(mNotesList, len(mNotesList) - 1);
}

function NotesTool::RedoLastAction(content)
{
	var newNote = CVmObj(mNoteMesh);
	
	newNote.SetPosition(content[0]);
	newNote.SetRotationMatrix(content[1]);
	
	print("redo", content[0]);
	
	aadd(mNotesList, newNote);
}
