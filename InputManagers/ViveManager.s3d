
class ViveManager
{
	// Camera used for movements
	var mCamera;

	var mHMD;
	
	var mController1Index;
	var mController2Index;
	
	var mControllers;
	
	var mIsPressingMenuButton;
	var mPrimaryButtonSinglePressed;
	var mGripSinglePressed;
	var mTouchpadLeftSinglePressed;
	var mTouchpadRightSinglePressed;
	var mTouchpadUpSinglePressed;
	var mTouchpadDownSinglePressed;
	
	// Boolean; is true when de debug mode is active
	var mDebugMode;
		
	// Public functions
	UpdateCamera();
	UpdateControllers(openglTranslationOffset);
	SetActiveCamera(camera);
	IsPressingPrimaryButton(controllerIndex);
	IsPressingSecondaryButton(controllerIndex);
	PrimaryButtonSinglePressed(controllerIndex);
	IsGripPressed(controllerIndex);
	GripSinglePressed(controllerIndex);
	HasPressedMenuButton(controllerIndex);
	TouchpadLeftSinglePressed(controllerIndex);
	TouchpadRightSinglePressed(controllerIndex);
	TouchpadUpSinglePressed(controllerIndex);
	TouchpadDownSinglePressed(controllerIndex);
	VibrateController(controllerIndex, microseconds);
	GetController(controllerIndex);
	GetPlayAreaSize();
};


/*
 * Constructor
 */
function ViveManager::ViveManager(HMD)
{
	// I don't know why, but I have to remove the cursor both here and in the main file of the project, otherwise it doesn't disappear
	ShowCursor(false);
	
	mHMD = HMD;
	
	var controllersIndex = mHMD.GetControllersIndex();
	
	mController1Index = controllersIndex[0];
	mController2Index = controllersIndex[1];
	
	mControllers = {};
		
	aadd(mControllers, ViveController(1));
	aadd(mControllers, ViveController(2));
	
	mIsPressingMenuButton = false;
	mPrimaryButtonSinglePressed = false;
	mGripSinglePressed = false;
	mTouchpadLeftSinglePressed = false;
	mTouchpadRightSinglePressed = false;
	mTouchpadUpSinglePressed = false;
	mTouchpadDownSinglePressed = false;
}


/*
 * This function has to be called at each "updateLogic()" function call. It updates the rotation matrix of the camera, 
 * so it's rotated according to mouse movements
 */
function ViveManager::UpdateCamera()
{	
	mCamera.SetMatrix(mHMD.GetCameraMatrix());
}


function ViveManager::UpdateControllers(openglTranslationOffset)
{
	var controller1Matrix = mHMD.GetControllerMatrix(mController1Index);
	var controller2Matrix = mHMD.GetControllerMatrix(mController2Index);
	
	var x1 = controller1Matrix[12] - openglTranslationOffset.x;
	var y1 = controller1Matrix[13] - openglTranslationOffset.y;
	var z1 = controller1Matrix[14] - openglTranslationOffset.z;	
	mControllers[0].SetPosition([x1, y1, z1]);

	var x2 = controller2Matrix[12] - openglTranslationOffset.x;
	var y2 = controller2Matrix[13] - openglTranslationOffset.y;
	var z2 = controller2Matrix[14] - openglTranslationOffset.z;
	mControllers[1].SetPosition([x2, y2, z2]);
	
	controller1Matrix[12] = 0;
	controller1Matrix[13] = 0;
	controller1Matrix[14] = 0;
	
	controller2Matrix[12] = 0;
	controller2Matrix[13] = 0;
	controller2Matrix[14] = 0;
	
	mControllers[0].SetRotationMatrix(controller1Matrix);
	mControllers[1].SetRotationMatrix(controller2Matrix);	
	
	mControllers[0].UpdateStatus(mHMD.GetTouchPadCoord(mController1Index), mHMD.GetTriggerCoord(mController1Index), mHMD.IsMenuPressed(mController1Index), mHMD.IsTriggerPressed(mController1Index), mHMD.IsGripPressed(mController1Index), mHMD.IsTouchpadPressed(mController1Index), mHMD.IsSystemButtonPressed(mController1Index));
	mControllers[1].UpdateStatus(mHMD.GetTouchPadCoord(mController2Index), mHMD.GetTriggerCoord(mController2Index), mHMD.IsMenuPressed(mController2Index), mHMD.IsTriggerPressed(mController2Index), mHMD.IsGripPressed(mController2Index), mHMD.IsTouchpadPressed(mController2Index), mHMD.IsSystemButtonPressed(mController2Index));
}


function ViveManager::SetActiveCamera(camera)
{
	mCamera = camera;
}

function ViveManager::IsPressingPrimaryButton(controllerIndex)
{
	return mHMD.IsTriggerPressed(controllerIndex == 1 ? mController1Index : mController2Index) == 1;
}

function ViveManager::IsPressingSecondaryButton(controllerIndex)
{
	return mHMD.IsTouchpadPressed(controllerIndex == 1 ? mController1Index : mController2Index) == 1;
}

function ViveManager::PrimaryButtonSinglePressed(controllerIndex)
{
	if(mHMD.IsTriggerPressed(controllerIndex == 1 ? mController1Index : mController2Index) == 1)
	{
		if(!mPrimaryButtonSinglePressed)
		{
			mPrimaryButtonSinglePressed = true;
			return true;
		}
	}
	else
		mPrimaryButtonSinglePressed = false;
		
	return false;
}

function ViveManager::GripSinglePressed(controllerIndex)
{
	if(mHMD.IsGripPressed(controllerIndex == 1 ? mController1Index : mController2Index) == 1)
	{
		if(!mGripSinglePressed)
		{
			mGripSinglePressed = true;
			return true;
		}
	}
	else
		mGripSinglePressed = false;
		
	return false;
}

function ViveManager::IsGripPressed(controllerIndex)
{
	return mHMD.IsGripPressed(controllerIndex == 1 ? mController1Index : mController2Index) == 1;
}


function ViveManager::HasPressedMenuButton(controllerIndex)
{	
	if(mHMD.IsMenuPressed(controllerIndex == 1 ? mController1Index : mController2Index) == 1)
	{
		if(!mIsPressingMenuButton)
		{
			mIsPressingMenuButton = true;
			return true;
		}
	}
	else
		mIsPressingMenuButton = false;
		
	return false;
}

function ViveManager::TouchpadLeftSinglePressed(controllerIndex)
{
	var acctualControllerIndex = (controllerIndex == 1 ? mController1Index : mController2Index);
	
	var coordsTouched = mHMD.GetTouchpadCoord(acctualControllerIndex);
	
	if(coordsTouched.x < 0 && mHMD.IsTouchpadPressed(acctualControllerIndex) == 1)
	{
		if(!mTouchpadLeftSinglePressed)
		{
			mTouchpadLeftSinglePressed = true;
			return true;
		}
	}
	else
		mTouchpadLeftSinglePressed = false;
			
	return false;
}

function ViveManager::TouchpadRightSinglePressed(controllerIndex)
{
	var acctualControllerIndex = (controllerIndex == 1 ? mController1Index : mController2Index);
	
	var coordsTouched = mHMD.GetTouchpadCoord(acctualControllerIndex);
	
	if(coordsTouched.x > 0 && mHMD.IsTouchpadPressed(acctualControllerIndex) == 1)
	{
		if(!mTouchpadRightSinglePressed)
		{
			mTouchpadRightSinglePressed = true;
			return true;
		}
	}
	else
		mTouchpadRightSinglePressed = false;
			
	return false;
}

function ViveManager::TouchpadUpSinglePressed(controllerIndex)
{
	var acctualControllerIndex = (controllerIndex == 1 ? mController1Index : mController2Index);
	
	var coordsTouched = mHMD.GetTouchpadCoord(acctualControllerIndex);
	
	if(coordsTouched.y > 0 && mHMD.IsTouchpadPressed(acctualControllerIndex) == 1)
	{
		if(!mTouchpadUpSinglePressed)
		{
			mTouchpadUpSinglePressed = true;
			return true;
		}
	}
	else
		mTouchpadUpSinglePressed = false;
			
	return false;
}

function ViveManager::TouchpadDownSinglePressed(controllerIndex)
{
	var acctualControllerIndex = (controllerIndex == 1 ? mController1Index : mController2Index);
	
	var coordsTouched = mHMD.GetTouchpadCoord(acctualControllerIndex);
	
	if(coordsTouched.y < 0 && mHMD.IsTouchpadPressed(acctualControllerIndex) == 1)
	{
		if(!mTouchpadDownSinglePressed)
		{
			mTouchpadDownSinglePressed = true;
			return true;
		}
	}
	else
		mTouchpadDownSinglePressed = false;
			
	return false;
}

function ViveManager::VibrateController(controllerIndex, microseconds)
{
	return mHMD.VibrateController(controllerIndex == 1 ? mController1Index : mController2Index, microseconds);
}

function ViveManager::GetController(controllerIndex)
{
	if(controllerIndex == 1)
		return mControllers[0];
	else if(controllerIndex == 2)
		return mControllers[1];
}

function ViveManager::GetPlayAreaSize()
{
	return mHMD.GetPlayAreaSize();
}
